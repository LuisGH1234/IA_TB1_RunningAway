#include <conio.h>
#include <iostream>
#include <queue>
#include <vector>
#include <time.h>

using namespace System;
using namespace std;

struct item
	{
		int id;
		int beneficio;
		int peso;
	};


int main()
	{
		vector<item> items;
		item auxItems;
		int beneficio, peso, pesoacumulado=0;
		int numItem;
		int aux;
		cin >> numItem >> peso;
		for(int i = 0; i < numItem;i++)
			{
				auxItems.id = i;
				cin >> auxItems.beneficio >> auxItems.peso;
				items.push_back(auxItems);
			}
		queue<int> q;
		vector<vector<int>> Grafo(items.size());
		int *incoming = new int[items.size()];
		for (int i = 0; i < items.size(); i++)
			incoming[i] = 0;
		for(int i = 0; i < items.size();i++)
			for(int j = 0; j < items.size();j++)
				if(i!=j && items[i].beneficio < items[j].peso && items[i].peso+items[j].peso <= peso)
					{
						incoming[items[j].id]++;
						Grafo[items[i].id].push_back(items[j].id);
					}
		for (int i = 0; i < items.size(); i++)
			if (incoming[i] == 0)
				q.push(i);
		int v;
		while(!q.empty())
			{
				aux = q.front();
				q.pop();
				pesoacumulado += items[aux].peso;
				if (pesoacumulado <= peso)
					for (int i = 0; i < Grafo[aux].size(); i++)
					{
						v = Grafo[aux][i];
						incoming[v]--;
						if (incoming[v] == 0)
							q.push(v);
					}
				else
					break;
				if(q.empty() && pesoacumulado<= peso)
					{
						int mayor = 0;
						for (int i = 0; i < Grafo[aux].size(); i++)
							if (mayor < items[Grafo[aux][i]].beneficio/* && items[aux].beneficio<items[Grafo[aux][i]].peso*/)
								mayor = Grafo[aux][i];
						if (items[mayor].peso + pesoacumulado <= peso)
							q.push(mayor);
					}
				
				cout << aux << " ";
			}
		_getch();
		return 0;
	}